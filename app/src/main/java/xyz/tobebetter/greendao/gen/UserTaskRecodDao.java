package xyz.tobebetter.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xyz.tobebetter.entity.UserTaskRecod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TASK_RECOD".
*/
public class UserTaskRecodDao extends AbstractDao<UserTaskRecod, String> {

    public static final String TABLENAME = "USER_TASK_RECOD";

    /**
     * Properties of entity UserTaskRecod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserTaskId = new Property(0, long.class, "userTaskId", false, "USER_TASK_ID");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Id = new Property(4, String.class, "id", true, "ID");
        public final static Property CreateDate = new Property(5, Long.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(6, Long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
    };


    public UserTaskRecodDao(DaoConfig config) {
        super(config);
    }
    
    public UserTaskRecodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TASK_RECOD\" (" + //
                "\"USER_TASK_ID\" INTEGER NOT NULL ," + // 0: userTaskId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 4: id
                "\"CREATE_DATE\" INTEGER," + // 5: createDate
                "\"UPDATE_DATE\" INTEGER," + // 6: updateDate
                "\"STATUS\" INTEGER);"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TASK_RECOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTaskRecod entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserTaskId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate);
        }
 
        Long updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(7, updateDate);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTaskRecod entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserTaskId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate);
        }
 
        Long updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(7, updateDate);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public UserTaskRecod readEntity(Cursor cursor, int offset) {
        UserTaskRecod entity = new UserTaskRecod( //
            cursor.getLong(offset + 0), // userTaskId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updateDate
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTaskRecod entity, int offset) {
        entity.setUserTaskId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserTaskRecod entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserTaskRecod entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
